/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import dto.MajorDTO;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ngoba
 */
public class Pre_DELETE1 extends javax.swing.JFrame {

    /**
     * Creates new form Pre_DELETE1
     */
    ArrayList<MajorDTO> listma;
    
    public Pre_DELETE1() {
        initComponents();
        loadMajor222();
        loadMajor333();
        setResizable(false);
        jButtonDelete.setEnabled(false);
        jButtonPreDelete.setEnabled(false);
        jTextFieldMAJORCODE.setEnabled(false);
        jTextFieldMAJORNAME.setEnabled(false);
        jTextFieldSTATUS.setEnabled(false);
        jTextFieldSTATUS.setText("0");
        
    }
    
    private void loadMajor222() {
        try {
            listma = dao.majorDAO.getAllMajor222();
            // if (!listma.isEmpty()) {
            Vector header = new Vector();
            header.add("MajorCode");
            header.add("MajorName");
//            header.add("Status");
            Vector data = new Vector();
            for (MajorDTO s : listma) {
                Vector row = new Vector();
                row.add(s.getMajorCode());
                row.add(s.getMajorName());
//                row.add(s.getStatus());
                data.add(row);
            }
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setDataVector(data, header);
            
        } catch (Exception e) {
            e.getMessage();
        }
    }
    
    private void loadMajor333() {
        try {
            listma = dao.majorDAO.getAllMajor222();
            if (!listma.isEmpty()) {
                Vector header = new Vector();
                header.add("MajorCode");
                header.add("MajorName");
//            header.add("Status");
                Vector data = new Vector();
                for (MajorDTO s : listma) {
                    Vector row = new Vector();
                    row.add(s.getMajorCode());
                    row.add(s.getMajorName());
//                row.add(s.getStatus());
                    data.add(row);
                }
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setDataVector(data, header);
                
            } else {
                JOptionPane.showMessageDialog(this, "List is Null");
                
            }
        } catch (Exception e) {
            e.getMessage();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonDelete = new javax.swing.JButton();
        jButtonPreDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldMAJORCODE = new javax.swing.JTextField();
        jTextFieldMAJORNAME = new javax.swing.JTextField();
        jTextFieldSTATUS = new javax.swing.JTextField();
        jButtonFind = new javax.swing.JButton();
        checkMajorCode = new javax.swing.JLabel();
        jButtonGetALL = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jTable1.setForeground(new java.awt.Color(0, 153, 204));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
        }

        jButtonDelete.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButtonDelete.setText("DELETE");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonPreDelete.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButtonPreDelete.setText("Pre_Delete");
        jButtonPreDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPreDeleteActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 255));
        jLabel1.setText("THE LIST OF MAJOR");

        jLabel.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel.setText("MajorCode");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel3.setText("MajorName");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel4.setText("Status");

        jButtonFind.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButtonFind.setText("Find");
        jButtonFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFindActionPerformed(evt);
            }
        });

        jButtonGetALL.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButtonGetALL.setText("GetAll");
        jButtonGetALL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGetALLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(319, 319, 319))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldMAJORNAME, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkMajorCode, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldMAJORCODE, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldSTATUS, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(73, 73, 73)
                        .addComponent(jButtonFind, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(jButtonDelete)
                        .addGap(26, 26, 26)
                        .addComponent(jButtonPreDelete)
                        .addGap(31, 31, 31)
                        .addComponent(jButtonGetALL)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldMAJORCODE, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonFind))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkMajorCode, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldMAJORNAME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jTextFieldSTATUS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonDelete)
                            .addComponent(jButtonPreDelete)
                            .addComponent(jButtonGetALL))))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel, jLabel3, jLabel4});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jTextFieldMAJORCODE, jTextFieldMAJORNAME, jTextFieldSTATUS});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        
        int pos = jTable1.getSelectedRow();
        String majorCode = listma.get(pos).getMajorCode().trim();
        if (pos >= 0) {
            try {
                int a = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete?", "confirm", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (a == JOptionPane.YES_OPTION) {
                    int result = dao.majorDAO.DeleteMajorThat(majorCode);
                    if (result != 0) {
                        JOptionPane.showMessageDialog(null, "Deleted successfully");
                        loadMajor222();
                        loadMajor333();
                        jButtonDelete.setEnabled(false);
                        jButtonPreDelete.setEnabled(false);
                        jButtonDelete.setEnabled(false);
                        jButtonPreDelete.setEnabled(false);
                        jTextFieldMAJORNAME.setEnabled(false);
                        jTextFieldMAJORCODE.setText("");
                        jTextFieldMAJORNAME.setText("");
                        jTextFieldSTATUS.setText("");
                        checkMajorCode.setText("");
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Delete faileds");
                
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select to delete");
            
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonPreDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPreDeleteActionPerformed
        
        int pos = jTable1.getSelectedRow();
        String majorCode = listma.get(pos).getMajorCode().trim();
        if (pos >= 0) {
            try {
                int a = JOptionPane.showConfirmDialog(this, "Are you sure you want to Pre_Delete?", "confirm", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (a == JOptionPane.YES_OPTION) {
                    int result = dao.majorDAO.Pre_DELETEMajor(majorCode);
                    if (result != 0) {
                        JOptionPane.showMessageDialog(null, "Pre_Delete successfully");
                        loadMajor222();
                        loadMajor333();
                        jButtonDelete.setEnabled(false);
                        jButtonPreDelete.setEnabled(false);
                        jTextFieldMAJORCODE.setText("");
                        jTextFieldMAJORNAME.setText("");
                        jTextFieldSTATUS.setText("");
                        jTextFieldMAJORNAME.setEnabled(false);
                        checkMajorCode.setText("");
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Pre_Delete fail");
                
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select to Pre_Delete");
            
        }
    }//GEN-LAST:event_jButtonPreDeleteActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        jButtonFind.setEnabled(false);
        int pos = jTable1.getSelectedRow();
        resetJtext();
        try {
            if (pos >= 0) {
                jTextFieldMAJORCODE.setText("" + jTable1.getValueAt(pos, 0));
                jTextFieldMAJORNAME.setText("" + jTable1.getValueAt(pos, 1));
                jTextFieldSTATUS.setText("" + listma.get(pos).getStatus());
                jTextFieldMAJORNAME.setEditable(false);
                jTextFieldSTATUS.setEnabled(false);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select row to show");
            
        }

    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFindActionPerformed
        // TODO add your handling code here:
        loadMajor222();
        jTextFieldMAJORCODE.setEditable(true);
        jTextFieldMAJORCODE.setEnabled(true);
        jTextFieldMAJORNAME.setEnabled(false);
        jTextFieldMAJORNAME.setText("");
        jTextFieldSTATUS.setEnabled(false);
        jTextFieldSTATUS.setText("");
        jButtonFind.setEnabled(true);
        jButtonDelete.setEnabled(false);
        jButtonPreDelete.setEnabled(false);
        if (checkMajorCode() == true) {
            String Code = jTextFieldMAJORCODE.getText().trim().toUpperCase();
            int x = findmajor(Code);
            if (x >= 0) {
                ArrayList<MajorDTO> listfound = new ArrayList<>();
                MajorDTO major = new MajorDTO(Code, listma.get(x).getMajorName(), listma.get(x).getStatus());
                listfound.add(major);
                loadFindMajor(listfound);
                jTable1.setRowSelectionInterval(0, 0);
                JOptionPane.showMessageDialog(this, "Found a major!");
                jTextFieldMAJORCODE.setEditable(true);
                checkMajorCode.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "Sorry...Not Found");
                jTextFieldMAJORCODE.grabFocus();
                jTextFieldMAJORCODE.selectAll();
            }
        }
    }//GEN-LAST:event_jButtonFindActionPerformed

    private void jButtonGetALLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGetALLActionPerformed
        loadMajor222();
        loadMajor333();
        jButtonDelete.setEnabled(false);
        jButtonPreDelete.setEnabled(false);
        jTextFieldMAJORCODE.setText("");
        jTextFieldMAJORNAME.setText("");
        jTextFieldSTATUS.setText("");
        jTextFieldMAJORNAME.setEnabled(false);
        jTextFieldMAJORCODE.setEnabled(false);
        checkMajorCode.setText("");
        jButtonFind.setEnabled(true);
    }//GEN-LAST:event_jButtonGetALLActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pre_DELETE1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pre_DELETE1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pre_DELETE1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pre_DELETE1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pre_DELETE1().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel checkMajorCode;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonFind;
    private javax.swing.JButton jButtonGetALL;
    private javax.swing.JButton jButtonPreDelete;
    private javax.swing.JLabel jLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldMAJORCODE;
    private javax.swing.JTextField jTextFieldMAJORNAME;
    private javax.swing.JTextField jTextFieldSTATUS;
    // End of variables declaration//GEN-END:variables

    private void resetJtext() {
        jTextFieldMAJORCODE.setEnabled(false);
        jTextFieldMAJORNAME.setEnabled(true);
        jButtonDelete.setEnabled(true);
        jButtonPreDelete.setEnabled(true);
        
    }
    
    private boolean checkMajorCode() {
        String majorcode = jTextFieldMAJORCODE.getText().trim();
        String regex = "[a-zA-Z\\s]*";
        
        if (majorcode.equals("")) {
            checkMajorCode.setText("Please input MajorCode");
            checkMajorCode.setForeground(Color.red);
            jTextFieldMAJORCODE.grabFocus();
            jTextFieldMAJORCODE.selectAll();
            
        } else {
            if (!majorcode.matches(regex) || majorcode.length() > 2 || majorcode.length() < 2) {
                checkMajorCode.setText("Max length is 2 character,not contains special characters");
                checkMajorCode.setForeground(Color.red);
                jTextFieldMAJORCODE.grabFocus();
                jTextFieldMAJORCODE.selectAll();
                
            } else {
                checkMajorCode.setText("");
                checkMajorCode.setForeground(Color.WHITE);
                return true;
            }
            
        }
        return false;
        
    }
    
    private int findmajor(String id) {
        int count = 0;
        for (MajorDTO x : listma) {
            if (id.equals(x.getMajorCode())) {
                return count;
            }
            count = count + 1;
        }
        return -1;
        
    }
    
    private void loadFindMajor(ArrayList<MajorDTO> listfound) {
        try {
            Vector header = new Vector();
            header.add("MajorCode");
            header.add("MajorName");
//            header.add("Status");

            Vector data = new Vector();
            for (MajorDTO s : listma) {
                Vector row = new Vector();
                row.add(s.getMajorCode());
                row.add(s.getMajorName());
//                row.add(s.getStatus());
                data.add(row);
            }
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setDataVector(data, header);
        } catch (Exception e) {
            e.getMessage();
        }
    }
}
