/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import dto.MajorDTO;
import dto.StudentDTO;
import java.awt.Color;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ngoba
 */
public class Students extends javax.swing.JPanel {

    /**
     * Creates new form Student
     */
    int luu = 0;
    ArrayList<StudentDTO> listst;
    ArrayList<MajorDTO> listma;
    boolean find = false;

    public Students() {
        initComponents();
        loadmajor1();
        loadStudents();
        jTextFielStudentID.setEnabled(false);
        jTextFielStudentID.setText("");
        jTextFieldStudentName.setEnabled(false);
        jTextFieldStudentName.setText("");
        jButtonFind.setEnabled(true);
        jTextFieldPhone.setEnabled(false);
        jTextFieldPhone.setText("");
        jTextFieldEmail.setEnabled(false);
        jTextFieldEmail.setText("");
        jTextAreaAddress.setEnabled(false);
        jTextAreaAddress.setText("");
        jTextFieldDayOfBirth.setEnabled(false);
        jTextFieldDayOfBirth.setText("");
        jComboBoxMajorCode.setEnabled(false);
        jTextFieldStatus.setEnabled(false);
        jTextFieldStatus.setEditable(false);
        jTextFieldStatus.setText("");
//        jComboBoxMajorCode.setSelectedIndex(-1);
        jButtonSave.setEnabled(false);
        jButtonCreate.setEnabled(true);
        jButtonDelete.setEnabled(false);
        jButtonUpdate.setEnabled(false);
        jButtonCancel.setEnabled(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFielStudentID = new javax.swing.JTextField();
        jTextFieldStudentName = new javax.swing.JTextField();
        jTextFieldPhone = new javax.swing.JTextField();
        jTextFieldEmail = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaAddress = new javax.swing.JTextArea();
        jTextFieldDayOfBirth = new javax.swing.JTextField();
        jComboBoxMajorCode = new javax.swing.JComboBox<>();
        jButtonCreate = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jButtonFind = new javax.swing.JButton();
        jcheckStudentID = new javax.swing.JLabel();
        jCheckStudentName = new javax.swing.JLabel();
        jcheckPhone = new javax.swing.JLabel();
        jCheckEmail = new javax.swing.JLabel();
        jCheckAddress = new javax.swing.JLabel();
        jCheckDayOfBirth = new javax.swing.JLabel();
        JcheckCombobox = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButtonPre_DELETE = new javax.swing.JButton();
        jLab = new javax.swing.JLabel();
        jTextFieldStatus = new javax.swing.JTextField();

        jTable1.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "StudentID", "StudentName", "Phone", "Email", "MajorCode"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel1.setText("StudentID");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel2.setText("StudentName");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel3.setText("Phone");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel4.setText("Email");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel5.setText("Address");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel6.setText("DayOfBirth");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel7.setText("MajorCode");

        jTextAreaAddress.setColumns(20);
        jTextAreaAddress.setRows(5);
        jScrollPane2.setViewportView(jTextAreaAddress);

        jButtonCreate.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButtonCreate.setText("Create");
        jButtonCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreateActionPerformed(evt);
            }
        });

        jButtonUpdate.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButtonUpdate.setText("Update");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButtonDelete.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonSave.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jButtonCancel.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonFind.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButtonFind.setText("Find");
        jButtonFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFindActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton1.setText("GetAll");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButtonPre_DELETE.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButtonPre_DELETE.setText("Pre_Delete");
        jButtonPre_DELETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPre_DELETEActionPerformed(evt);
            }
        });

        jLab.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLab.setText("Status");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonPre_DELETE)
                        .addGap(52, 52, 52)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(172, 172, 172)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(274, 274, 274)
                        .addComponent(jButtonFind, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextFieldStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxMajorCode, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jCheckStudentName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldPhone, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                        .addComponent(jcheckPhone, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jcheckStudentID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFielStudentID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jCheckDayOfBirth, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldDayOfBirth, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jCheckAddress, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jCheckEmail, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldEmail, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(jButtonUpdate)
                            .addGap(18, 18, 18)
                            .addComponent(jButtonDelete)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jButtonSave)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(JcheckCombobox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldStatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonCreate, jButtonDelete, jButtonSave, jButtonUpdate});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonFind, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFielStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcheckStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcheckPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldDayOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jLabel7))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton1)
                                        .addComponent(jButtonPre_DELETE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jCheckDayOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBoxMajorCode, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(12, 12, 12)
                .addComponent(JcheckCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLab, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUpdate)
                    .addComponent(jButtonDelete)
                    .addComponent(jButtonSave)
                    .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(312, 312, 312))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jTextFielStudentID, jTextFieldEmail, jTextFieldPhone, jTextFieldStudentName});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonCreate, jButtonDelete, jButtonSave, jButtonUpdate});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jComboBoxMajorCode, jTextFieldDayOfBirth, jTextFieldStatus});

    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed

        String studentid = jTextFielStudentID.getText().trim().toUpperCase();
        String studentname = jTextFieldStudentName.getText().trim();
        String phone = jTextFieldPhone.getText().trim();
        String email = jTextFieldEmail.getText().trim();
        String dayofbirth = jTextFieldDayOfBirth.getText().trim();
        String[] majorCode = ((String) jComboBoxMajorCode.getSelectedItem()).split("-");
        String address = jTextAreaAddress.getText().trim();
        String status = jTextFieldStatus.getText().trim();
        if (luu == 1) {
            if (checkStudentID() == true && checkStudentName() && checkPhone() && checkEmail() && checkAddress() && CheckDate() && checksave()) {
                if (!studentid.isEmpty() && !studentname.isEmpty() && !phone.isEmpty() && !email.isEmpty() && !dayofbirth.isEmpty() && jComboBoxMajorCode.getSelectedIndex() != -1 && !address.isEmpty()) {
                    try {

                        int result = dao.StudentDAO.InsertStudent(studentid, studentname, phone, email, dayofbirth, majorCode[0], address, status);
                        if (result != 0) {
                            JOptionPane.showMessageDialog(null, "Saved");
                            loadStudents();
                            jButtonFind.setEnabled(true);
                            jButtonSave.setEnabled(true);
                            jcheckStudentID.setText("");
                            jTextFielStudentID.setEnabled(false);
                        } else {
                            JOptionPane.showMessageDialog(null, "Not saved");
                        }
                    } catch (Exception e) {
                        if (e.getMessage().contains("duplicate")) {
                            JOptionPane.showMessageDialog(null, "Duplication StudentID,You must be really delete StudentID");
                            jTextFielStudentID.grabFocus();
                            jTextFielStudentID.selectAll();
                        }

                    }
                }
            }
        } else if (luu == 0) {
            if (checksave() && checkStudentName() && checkPhone() && checkEmail() && checkAddress() && CheckDate() && checkStudentID()) {
                if (!studentid.isEmpty() && !studentname.isEmpty() && !phone.isEmpty() && !email.isEmpty() && !dayofbirth.isEmpty() && jComboBoxMajorCode.getSelectedIndex() != -1 && !address.isEmpty()) {
                    try {
                        int result = dao.StudentDAO.UpdateStudent(studentname, phone, email, dayofbirth, address, majorCode[0], studentid);
                        if (result != 0) {
                            JOptionPane.showMessageDialog(this, "Update successfully");
                            loadStudents();
                            jcheckStudentID.setText("");
                            jTextFielStudentID.setEditable(false);
                            jButtonUpdate.setEnabled(false);
                            jButtonSave.setEnabled(false);
                            jTextFieldStudentName.setEditable(false);
                            jButtonFind.setEnabled(true);
                            jTextFieldPhone.setEditable(false);
                            jTextFieldEmail.setEditable(false);
                            jTextAreaAddress.setEditable(false);
                            jTextFieldDayOfBirth.setEditable(false);
                            jComboBoxMajorCode.getSelectedItem();

                        } else {
                            JOptionPane.showMessageDialog(this, "Update fail");

                        }
                    } catch (Exception e) {
                        //   JOptionPane.showMessageDialog(this, e.getMessage());
                        e.printStackTrace();

                    }
                }
            }
        }


    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int pos = jTable1.getSelectedRow();
        resetJtext();
        //String date = new SimpleDateFormat("dd/MM/yyyy").format(listst.get(pos).getDayOfBirth());
        if (pos >= 0) {
            jTextFielStudentID.setText("" + jTable1.getValueAt(pos, 0));
            jTextFieldStudentName.setText("" + jTable1.getValueAt(pos, 1));
            jTextFieldPhone.setText("" + jTable1.getValueAt(pos, 2));
            jTextFieldEmail.setText("" + jTable1.getValueAt(pos, 3));
            jTextFieldDayOfBirth.setText(listst.get(pos).getDayOfBirth());
            jTextAreaAddress.setText("" + listst.get(pos).getAddress());
            //String nameMajor = getNameMajor(listma.get(pos).getMajorCode());
            jComboBoxMajorCode.setSelectedItem("" + jTable1.getValueAt(pos, 4));
            jTextFieldStatus.setText("" + listst.get(pos).getStatus());
            jComboBoxMajorCode.setEditable(false);
        }
        luu = 0;
        jcheckStudentID.setText("");
        jCheckStudentName.setText("");
        jcheckPhone.setText("");
        jCheckEmail.setText("");
        jCheckAddress.setText("");
        jCheckDayOfBirth.setText("");


    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreateActionPerformed
        jTextFielStudentID.setEnabled(true);
        jTextFielStudentID.setEditable(true);
        jTextFielStudentID.setText("");
        jTextFieldStudentName.setEnabled(true);
        jTextFieldStudentName.setEditable(true);
        jTextFieldStudentName.setText("");
        jTextFieldPhone.setEnabled(true);
        jTextFieldPhone.setEditable(true);
        jTextFieldPhone.setText("");
        jTextFieldEmail.setEnabled(true);
        jTextFieldEmail.setEditable(true);
        jTextFieldEmail.setText("");
        jTextAreaAddress.setEnabled(true);
        jTextAreaAddress.setEditable(true);
        jTextAreaAddress.setText("");
        jTextFieldDayOfBirth.setEnabled(true);
        jTextFieldDayOfBirth.setEditable(true);
        jTextFieldDayOfBirth.setText("");
        jComboBoxMajorCode.setEnabled(true);
        jComboBoxMajorCode.setEditable(false);
        jTextFieldStatus.setEditable(false);
        jTextFieldStatus.setEnabled(false);
        jTextFieldStatus.setText("1");
        jButtonUpdate.setEnabled(false);
        jButtonDelete.setEnabled(false);
        jButtonFind.setEnabled(false);
        jButtonSave.setEnabled(true);
        jButtonCancel.setEnabled(true);
        luu = 1;


    }//GEN-LAST:event_jButtonCreateActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        loadStudents();
        jTextFielStudentID.setEnabled(false);
        jTextFielStudentID.setText("");
        jTextFieldStudentName.setEnabled(false);
        jTextFieldStudentName.setText("");
        jCheckStudentName.setText("");
        jTextFieldPhone.setEnabled(false);
        jTextFieldPhone.setText("");
        jcheckPhone.setText("");
        jTextFieldEmail.setEnabled(false);
        jTextFieldEmail.setText("");
        jCheckEmail.setText("");
        jTextAreaAddress.setEnabled(false);
        jTextAreaAddress.setText("");
        jCheckAddress.setText("");
        jTextFieldDayOfBirth.setEnabled(false);
        jTextFieldDayOfBirth.setText("");
        jCheckDayOfBirth.setText("");
        jButtonFind.setEnabled(true);
        jButtonSave.setEnabled(false);
        jButtonCreate.setEnabled(true);
        jButtonDelete.setEnabled(false);
        jButtonUpdate.setEnabled(false);
        jButtonCancel.setEnabled(true);
        jTable1.setEnabled(true);
        jComboBoxMajorCode.setEnabled(false);
//        checkMajorCode.setText("");
//        checkmajorName.setText("");


    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        jButtonCreate.setEnabled(false);
        jButtonCreate.setEnabled(false);
        jButtonFind.setEnabled(false);
        jButtonDelete.setEnabled(false);
        jButtonSave.setEnabled(true);
        int click = jTable1.getSelectedRow();
        if (click >= 0) {
            jTextFielStudentID.setEditable(false);
            jTextFieldStudentName.setEditable(true);
            jTextFieldPhone.setEditable(true);
            jTextFieldEmail.setEditable(true);
            jTextFieldDayOfBirth.setEditable(true);
            jComboBoxMajorCode.setEditable(false);
            jTextAreaAddress.setEditable(true);

        } else {
            JOptionPane.showMessageDialog(this, "Please select a row to update");
        }


    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        int pos = jTable1.getSelectedRow();
        String studentid = jTextFielStudentID.getText();
        if (pos >= 0) {
            try {
                int a = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete?", "confirm", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (a == JOptionPane.YES_OPTION) {
                    int result = dao.StudentDAO.DeleteStudent(studentid);
                    if (result != 0) {
                        JOptionPane.showMessageDialog(null, "Deleted successfully");
                        loadStudents();
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Delete faileds");

            }
        } else {
            JOptionPane.showMessageDialog(null, "Select to delete");

        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFindActionPerformed
        jTextFielStudentID.setEditable(true);
        jTextFielStudentID.setEnabled(true);
        jTextFieldStudentName.setEnabled(false);
        jTextFieldPhone.setEnabled(false);
        jTextFieldEmail.setEnabled(false);
        jTextFieldDayOfBirth.setEnabled(false);
        jComboBoxMajorCode.setEnabled(false);
        jTextAreaAddress.setEnabled(false);
        jButtonCreate.setEnabled(false);
        jButtonFind.setEnabled(true);
        jButtonSave.setEnabled(false);
        jButtonUpdate.setEnabled(false);
        jButtonDelete.setEnabled(false);
        if (checkStudentID2() == true) {
            String Code = jTextFielStudentID.getText().trim().toUpperCase();
            int x = findStudent(Code);
            if (x >= 0) {
                ArrayList<StudentDTO> listfound = new ArrayList<>();
                StudentDTO student = new StudentDTO(Code, listst.get(x).getFullName(), listst.get(x).getPhone(), listst.get(x).getEmail(), listst.get(x).getAddress(), listst.get(x).getDayOfBirth(), listst.get(x).getMajorCode(), listst.get(x).getStatus());
                listfound.add(student);
                loadFindMajor(listfound);
                jTable1.setRowSelectionInterval(0, 0);
                JOptionPane.showMessageDialog(this, "Found a Student!");
                jTextFielStudentID.setEditable(false);
            } else {
                JOptionPane.showMessageDialog(this, "Sorry...Not Found");
                jTextFielStudentID.grabFocus();
                jTextFielStudentID.selectAll();
            }
        }
    }//GEN-LAST:event_jButtonFindActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        loadStudents111();
//        jTextFielStudentID.setEnabled(false);
//        jTextFielStudentID.setText("");
//        jTextFieldStudentName.setEnabled(false);
//        jTextFieldStudentName.setText("");
//        jCheckStudentName.setText("");
//        jTextFieldPhone.setEnabled(false);
//        jTextFieldPhone.setText("");
//        jcheckPhone.setText("");
//        jTextFieldEmail.setEnabled(false);
//        jTextFieldEmail.setText("");
//        jCheckEmail.setText("");
//        jTextAreaAddress.setEnabled(false);
//        jTextAreaAddress.setText("");
//        jCheckAddress.setText("");
//        jTextFieldDayOfBirth.setEnabled(false);
//        jTextFieldDayOfBirth.setText("");
//        jCheckDayOfBirth.setText("");
//        jButtonFind.setEnabled(true);
//        jButtonSave.setEnabled(false);
//        jButtonCreate.setEnabled(true);
//        jButtonDelete.setEnabled(false);
//        jButtonUpdate.setEnabled(false);
//        jButtonCancel.setEnabled(true);
//        jTable1.setEnabled(true);
//        jComboBoxMajorCode.setEnabled(false);
//        jcheckStudentID.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonPre_DELETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPre_DELETEActionPerformed
        Pre_DeleteStudent pr = new Pre_DeleteStudent();
        pr.setVisible(true);
    }//GEN-LAST:event_jButtonPre_DELETEActionPerformed
    int findStudent(String id) {
        int count = 0;
        for (StudentDTO x : listst) {
            if (id.equals(x.getStudentID())) {
                return count;
            }
            count = count + 1;
        }
        return -1;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JcheckCombobox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonCreate;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonFind;
    private javax.swing.JButton jButtonPre_DELETE;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JLabel jCheckAddress;
    private javax.swing.JLabel jCheckDayOfBirth;
    private javax.swing.JLabel jCheckEmail;
    private javax.swing.JLabel jCheckStudentName;
    private javax.swing.JComboBox<String> jComboBoxMajorCode;
    private javax.swing.JLabel jLab;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextAreaAddress;
    private javax.swing.JTextField jTextFielStudentID;
    private javax.swing.JTextField jTextFieldDayOfBirth;
    private javax.swing.JTextField jTextFieldEmail;
    private javax.swing.JTextField jTextFieldPhone;
    private javax.swing.JTextField jTextFieldStatus;
    private javax.swing.JTextField jTextFieldStudentName;
    private javax.swing.JLabel jcheckPhone;
    private javax.swing.JLabel jcheckStudentID;
    // End of variables declaration//GEN-END:variables
    public void loadStudents() {
        try {
            listst = dao.StudentDAO.getAllStudent();
            listma = dao.majorDAO.getAllMajor();
            Vector header = new Vector();
            header.add("StudentID");
            header.add("StudentName");
            header.add("Phone");
            header.add("Email");
            header.add("MajorCode");
            Vector data = new Vector();
            for (StudentDTO student : listst) {
                Vector row = new Vector();
                row.add(student.getStudentID());
                row.add(student.getFullName());
                row.add(student.getPhone());
                row.add(student.getEmail());
                String nameMajor = getNameMajor(student.getMajorCode());
                row.add(student.getMajorCode() + '-' + nameMajor);
                data.add(row);
            }
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setDataVector(data, header);
        } catch (Exception e) {
            e.getMessage();
        }
    }

    private void resetJtext() {
        jTextFielStudentID.setEnabled(false);
        jTextFieldStudentName.setEnabled(true);
        jTextFieldStudentName.setEditable(false);

        jTextFieldPhone.setEnabled(true);
        jTextFieldPhone.setEditable(false);

        jTextFieldEmail.setEnabled(true);
        jTextFieldEmail.setEditable(false);
        jTextAreaAddress.setEnabled(true);
        jTextAreaAddress.setEditable(false);
        jTextFieldDayOfBirth.setEnabled(true);
        jTextFieldDayOfBirth.setEditable(false);
        jComboBoxMajorCode.setEnabled(true);
        // jComboBoxMajorCode.setEditable(false);
        jButtonCreate.setEnabled(false);
        jButtonFind.setEnabled(false);
        jButtonSave.setEnabled(false);
        jButtonUpdate.setEnabled(true);
        jButtonDelete.setEnabled(true);
    }

    void loadmajor1() {
        try {
            listma = dao.majorDAO.getAllMajor();
            DefaultComboBoxModel cb = new DefaultComboBoxModel();
            for (MajorDTO dto : listma) {
                cb.addElement(dto.getMajorCode() + '-' + dto.getMajorName());
            }
            jComboBoxMajorCode.setModel(cb);
        } catch (Exception e) {
            e.getMessage();
        }
    }

    public String getNameMajor(String code) {
        for (MajorDTO x : listma) {
            if (code.equals(x.getMajorCode().trim())) {
                return x.getMajorName();
            }

        }
        return null;
    }

    private boolean checkStudentID() {
        String studentID = jTextFielStudentID.getText().toUpperCase().trim();
        String[] majorCode = jComboBoxMajorCode.getSelectedItem().toString().split("-");
        if (studentID.equals("")) {
            jcheckStudentID.setText("Please input StudentID");
            jcheckStudentID.setForeground(Color.red);
            jTextFielStudentID.grabFocus();
            jTextFielStudentID.selectAll();
        } else {
            if (!studentID.contains(majorCode[0]) || studentID.length() > 8 || studentID.length() < 8) {
                jcheckStudentID.setText("Max length is 8 character,StudentID must match the character in majorCode");
                jcheckStudentID.setForeground(Color.red);
                jTextFielStudentID.grabFocus();
                jTextFielStudentID.selectAll();

            } else {
                jcheckStudentID.setText("");
                jcheckStudentID.setForeground(Color.WHITE);
                return true;
            }

        }
        return false;

    }

    private boolean checkPhone() {
        String phone = jTextFieldPhone.getText().trim();
        String regex = "0[0-9]{9}";
        if (phone.equals("")) {
            jcheckPhone.setText("Please input Phone");
            jcheckPhone.setForeground(Color.red);
            jTextFieldPhone.grabFocus();
            jTextFieldPhone.selectAll();
        } else {
            if (!phone.matches(regex) || phone.length() > 10 || phone.length() < 10) {
                jcheckPhone.setText("Max length is 10 character,not contains special characters");
                jcheckPhone.setForeground(Color.red);
                jTextFieldPhone.grabFocus();
                jTextFieldPhone.selectAll();

            } else {
                jcheckPhone.setText("");
                jcheckPhone.setForeground(Color.WHITE);
                return true;
            }

        }
        return false;

    }

    private boolean checksave() {
        String studentID = jTextFielStudentID.getText().toUpperCase().trim();
        String[] majorCode = jComboBoxMajorCode.getSelectedItem().toString().split("-");
        System.out.println(studentID);
        System.out.println(majorCode[0]);
        if (!studentID.contains(majorCode[0])) {
            JcheckCombobox.setText("Please choose again Major the same 2 character of StudentID");
            JcheckCombobox.setForeground(Color.red);
        } else if (studentID.contains(majorCode[0])) {
            JcheckCombobox.setText("");
            JcheckCombobox.setForeground(Color.white);
            return true;
        }
        return false;

    }

    public boolean checkStudentName() {
        String studentName = jTextFieldStudentName.getText().trim();
        String regex = "[a-zA-Z\\s]*";
        if (studentName.equals("")) {
            jCheckStudentName.setText("Please input StudentName");
            jCheckStudentName.setForeground(Color.red);
            jTextFieldStudentName.grabFocus();
            jTextFieldStudentName.selectAll();
        } else {
            if (!studentName.matches(regex) || studentName.length() >= 50) {
                jCheckStudentName.setText("Max length is 50 characters, not contains special characters");
                jCheckStudentName.setForeground(Color.red);
                jTextFieldStudentName.grabFocus();
                jTextFieldStudentName.selectAll();

            } else {
                jCheckStudentName.setText("");
                jCheckStudentName.setForeground(Color.WHITE);
                return true;
            }

        }
        return false;
    }

    public boolean checkAddress() {
        String address = jTextAreaAddress.getText().trim();
        String regex = "[a-zA-Z\\s]*";
        if (address.equals("")) {
            jCheckAddress.setText("Please input Address");
            jCheckAddress.setForeground(Color.red);
            jTextAreaAddress.grabFocus();
            jTextAreaAddress.selectAll();
        } else {
            if (!address.matches(regex) || address.length() >= 50) {
                jCheckAddress.setText("Max length is 50 characters, not contains special characters");
                jCheckAddress.setForeground(Color.red);
                jTextAreaAddress.grabFocus();
                jTextAreaAddress.selectAll();

            } else {
                jCheckAddress.setText("");
                jCheckAddress.setForeground(Color.WHITE);
                return true;
            }
        }
        return false;
    }

    public boolean checkEmail() {
        String email = jTextFieldEmail.getText().trim();
        String regex = "^[a-zA-Z][a-zA-Z0-9]+@+fpt.edu.vn$";
        if (email.equals("")) {
            jCheckEmail.setText("Please input Email");
            jCheckEmail.setForeground(Color.red);
            jTextFieldEmail.grabFocus();
            jTextFieldEmail.selectAll();
        } else {
            if (!email.matches(regex) || email.length() >= 100) {
                jCheckEmail.setText("Max length is 100 characters,must be format ...@fpt.edu.vn");
                jCheckEmail.setForeground(Color.red);
                jTextFieldEmail.grabFocus();
                jTextFieldEmail.selectAll();

            } else {
                jCheckEmail.setText("");
                jCheckEmail.setForeground(Color.WHITE);
                return true;
            }

        }
        return false;
    }

    public boolean CheckDate() {
        String regex = "^[0-3][0-9]/[0-3][0-9]/(?:[0-9][0-9])?[0-9][0-9]$";
        String dayofbirth;
        try {
            dayofbirth = jTextFieldDayOfBirth.getText();
            if (dayofbirth.isEmpty()) {
                jCheckDayOfBirth.setText("Please input DayOfBirth");
                jCheckDayOfBirth.setForeground(Color.red);
            } else if (!dayofbirth.matches(regex)) {
                jCheckDayOfBirth.setText("DayOfBirth fomat: dd/MM/yyyy");
                jCheckDayOfBirth.setForeground(Color.red);
            } else {
                StringTokenizer stk = new StringTokenizer(dayofbirth, "/");
                int day = Integer.parseInt(stk.nextToken());
                int month = Integer.parseInt(stk.nextToken());
                int year = Integer.parseInt(stk.nextToken());
                int maxDay = 31;
                boolean flag = true;
                if (day < 1 || day > 31 || month < 1 || month > 12 || year < 1) {
                    jCheckDayOfBirth.setText("01<day<=31 and 01<month<=12 and Year>01");
                    jCheckDayOfBirth.setForeground(Color.red);
                    flag = false;

                } else if (month == 4 || month == 6 || month == 9 || month == 11) {
                    maxDay = 30;
                } else if (month == 2) {
                    if (year % 4 == 0 && year % 100 == 0) {
                        maxDay = 29;
                    } else {
                        maxDay = 28;
                    }
                }
                if (day <= maxDay && flag == true) {
                    jCheckDayOfBirth.setText("");
                    jCheckDayOfBirth.setForeground(Color.white);
                    return true;
                } else {
                    jCheckDayOfBirth.setText("Please check input again");
                    jCheckDayOfBirth.setForeground(Color.red);
                }
            }
        } catch (Exception e) {
            return false;
        }
        return false;

    }

    private void loadFindMajor(ArrayList<StudentDTO> listfound) {
        try {
            Vector header = new Vector();
            header.add("StudentID");
            header.add("StudentName");
            header.add("Phone");
            header.add("Email");
            header.add("MajorCode");
            Vector data = new Vector();
            for (StudentDTO student : listfound) {
                Vector row = new Vector();
                row.add(student.getStudentID());
                row.add(student.getFullName());
                row.add(student.getPhone());
                row.add(student.getEmail());
                String nameMajor = getNameMajor(student.getMajorCode());
                row.add(student.getMajorCode() + '-' + nameMajor);
                data.add(row);
            }
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setDataVector(data, header);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean checkStudentID2() {
        String studentID = jTextFielStudentID.getText().toUpperCase().trim();
        if (studentID.equals("")) {
            jcheckStudentID.setText("Please input StudentID");
            jcheckStudentID.setForeground(Color.red);
            jTextFielStudentID.grabFocus();
            jTextFielStudentID.selectAll();
        } else {
            if (studentID.length() > 8 || studentID.length() < 8) {
                jcheckStudentID.setText("Max length is 8 character,StudentID must match the character in majorCode");
                jcheckStudentID.setForeground(Color.red);
                jTextFielStudentID.grabFocus();
                jTextFielStudentID.selectAll();

            } else {
                jcheckStudentID.setText("");
                jcheckStudentID.setForeground(Color.WHITE);
                return true;
            }

        }
        return false;
    }

    private void loadStudents111() {
        try {
            listst = dao.StudentDAO.getAllStudent();
            listma = dao.majorDAO.getAllMajor();
            Vector header = new Vector();
            header.add("StudentID");
            header.add("StudentName");
            header.add("Phone");
            header.add("Email");
            header.add("MajorCode");
            Vector data = new Vector();
            for (StudentDTO student : listst) {
                Vector row = new Vector();
                row.add(student.getStudentID());
                row.add(student.getFullName());
                row.add(student.getPhone());
                row.add(student.getEmail());
                String nameMajor = getNameMajor(student.getMajorCode());
                row.add(student.getMajorCode() + '-' + nameMajor);
                data.add(row);
            }
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setDataVector(data, header);
        } catch (Exception e) {
            e.getMessage();
        }
    }

}
