/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import dto.MajorDTO;
import dto.StudentDTO;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ngoba
 */
public final class Pre_DeleteStudent extends javax.swing.JFrame {

    /**
     * Creates new form Pre_DeleteStudent
     */
    ArrayList<StudentDTO> listst;
    ArrayList<MajorDTO> listma;

    public Pre_DeleteStudent() {
        initComponents();
        loadmajor111();
        loadStudents111();
        loadStudents222();
        resetjtextfile();
        setResizable(false);

    }

    public void loadStudents111() {
        try {
            listst = dao.StudentDAO.getAllStudent111();
            listma = dao.majorDAO.getAllMajor111();
            Vector header = new Vector();
            header.add("StudentID");
            header.add("StudentName");
            header.add("Phone");
            header.add("Email");
            header.add("MajorCode");
//            header.add("Time Delete");
            Vector data = new Vector();
            for (StudentDTO student : listst) {
                Vector row = new Vector();
                row.add(student.getStudentID());
                row.add(student.getFullName());
                row.add(student.getPhone());
                row.add(student.getEmail());
                String nameMajor = getNameMajor(student.getMajorCode());
                row.add(student.getMajorCode() + '-' + nameMajor);
                //row.add(new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(student.getTimeCreate()));
                data.add(row);
            }
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setDataVector(data, header);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void loadStudents222() {
        try {
            if (!listst.isEmpty()) {
                listst = dao.StudentDAO.getAllStudent111();
                listma = dao.majorDAO.getAllMajor111();
                Vector header = new Vector();
                header.add("StudentID");
                header.add("StudentName");
                header.add("Phone");
                header.add("Email");
                header.add("MajorCode");
//            header.add("Time Delete");
                Vector data = new Vector();
                for (StudentDTO student : listst) {
                    Vector row = new Vector();
                    row.add(student.getStudentID());
                    row.add(student.getFullName());
                    row.add(student.getPhone());
                    row.add(student.getEmail());
                    String nameMajor = getNameMajor(student.getMajorCode());
                    row.add(student.getMajorCode() + '-' + nameMajor);
                    //row.add(new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(student.getTimeCreate()));
                    data.add(row);
                }
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setDataVector(data, header);
            } else {
                JOptionPane.showMessageDialog(this, "List is Null");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButtonDELETE1 = new javax.swing.JButton();
        jButtonPreDelete = new javax.swing.JButton();
        jLabelSTUDENTID = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabelSTUDENTPHONE = new javax.swing.JLabel();
        jLabelEMAIL = new javax.swing.JLabel();
        jLabelAddress = new javax.swing.JLabel();
        jLabelDAYOFBIRTH = new javax.swing.JLabel();
        jLabelMAJORCODE = new javax.swing.JLabel();
        jLabelSTATUS = new javax.swing.JLabel();
        jTextFieldSTUDENTID = new javax.swing.JTextField();
        jTextFieldSTUDENTNAME = new javax.swing.JTextField();
        jTextFieldPHONE = new javax.swing.JTextField();
        jTextFieldEMAIL = new javax.swing.JTextField();
        jTextFieldDAYOFBIRTH = new javax.swing.JTextField();
        jTextFieldSTATUS = new javax.swing.JTextField();
        jComboBoxMAJORID = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaADDRESS = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jcheckStudentID = new javax.swing.JLabel();
        jButtonGetALL = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jTable1.setForeground(new java.awt.Color(102, 102, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "null"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 255));
        jLabel1.setText("THE LIST OF STUDENT");

        jButtonDELETE1.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButtonDELETE1.setText("DELETE");
        jButtonDELETE1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDELETE1ActionPerformed(evt);
            }
        });

        jButtonPreDelete.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButtonPreDelete.setText("Pre_DELETE");
        jButtonPreDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPreDeleteActionPerformed(evt);
            }
        });

        jLabelSTUDENTID.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabelSTUDENTID.setText("StudentID");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel3.setText("StudentName");

        jLabelSTUDENTPHONE.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabelSTUDENTPHONE.setText("PHONE");

        jLabelEMAIL.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabelEMAIL.setText("Email");

        jLabelAddress.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabelAddress.setText("Address");

        jLabelDAYOFBIRTH.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabelDAYOFBIRTH.setText("DayOfBirth");

        jLabelMAJORCODE.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabelMAJORCODE.setText("MajorCode");

        jLabelSTATUS.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabelSTATUS.setText("Status");

        jTextFieldPHONE.setText(" ");

        jComboBoxMAJORID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTextAreaADDRESS.setColumns(20);
        jTextAreaADDRESS.setRows(5);
        jScrollPane2.setViewportView(jTextAreaADDRESS);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButton1.setText("Find");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButtonGetALL.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jButtonGetALL.setText("GetAll");
        jButtonGetALL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGetALLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jButtonDELETE1)
                                .addGap(46, 46, 46)
                                .addComponent(jButtonPreDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonGetALL, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelSTUDENTID, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabelSTUDENTPHONE)
                            .addComponent(jLabelEMAIL)
                            .addComponent(jLabelAddress)
                            .addComponent(jLabelDAYOFBIRTH)
                            .addComponent(jLabelMAJORCODE)
                            .addComponent(jLabelSTATUS))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcheckStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldSTUDENTID, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                                .addGap(42, 42, 42)
                                .addComponent(jButton1))
                            .addComponent(jTextFieldSTUDENTNAME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldPHONE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldEMAIL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldDAYOFBIRTH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxMAJORID, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldSTATUS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(390, 390, 390)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(121, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonDELETE1, jButtonPreDelete});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel3, jLabelAddress, jLabelDAYOFBIRTH, jLabelEMAIL, jLabelMAJORCODE, jLabelSTATUS, jLabelSTUDENTID, jLabelSTUDENTPHONE});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextFieldDAYOFBIRTH, jTextFieldEMAIL, jTextFieldPHONE, jTextFieldSTATUS, jTextFieldSTUDENTID, jTextFieldSTUDENTNAME});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonDELETE1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButtonPreDelete)
                                .addComponent(jButtonGetALL)))
                        .addGap(81, 81, 81))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextFieldSTUDENTID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcheckStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jTextFieldSTUDENTNAME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelSTUDENTPHONE)
                                    .addComponent(jTextFieldPHONE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelEMAIL)
                                    .addComponent(jTextFieldEMAIL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabelSTUDENTID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelAddress)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldDAYOFBIRTH, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDAYOFBIRTH))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelMAJORCODE)
                            .addComponent(jComboBoxMAJORID, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelSTATUS)
                            .addComponent(jTextFieldSTATUS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonDELETE1, jButtonPreDelete});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel3, jLabelAddress, jLabelDAYOFBIRTH, jLabelEMAIL, jLabelMAJORCODE, jLabelSTATUS, jLabelSTUDENTID, jLabelSTUDENTPHONE});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jTextFieldEMAIL, jTextFieldPHONE, jTextFieldSTATUS, jTextFieldSTUDENTID, jTextFieldSTUDENTNAME});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int pos = jTable1.getSelectedRow();
        resetJtext();
        //String date = new SimpleDateFormat("dd/MM/yyyy").format(listst.get(pos).getDayOfBirth());
        if (pos >= 0) {
            jTextFieldSTUDENTID.setText("" + jTable1.getValueAt(pos, 0));
            jTextFieldSTUDENTNAME.setText("" + jTable1.getValueAt(pos, 1));
            jTextFieldPHONE.setText("" + jTable1.getValueAt(pos, 2));
            jTextFieldEMAIL.setText("" + jTable1.getValueAt(pos, 3));
            jTextFieldDAYOFBIRTH.setText(listst.get(pos).getDayOfBirth());
            jTextAreaADDRESS.setText("" + listst.get(pos).getAddress());
            //String nameMajor = getNameMajor(listma.get(pos).getMajorCode());
            jComboBoxMAJORID.setSelectedItem("" + jTable1.getValueAt(pos, 4));
            jTextFieldSTATUS.setText("" + listst.get(pos).getStatus());
//            String date = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(listst.get(pos).getTimeCreate());
//            jTextFieldTimeDelete.setText(date);
            jComboBoxMAJORID.setEditable(false);
            jButtonDELETE1.setEnabled(true);
            jButtonPreDelete.setEnabled(true);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButtonDELETE1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDELETE1ActionPerformed

        int pos = jTable1.getSelectedRow();
        String studentid = jTextFieldSTUDENTID.getText();
        if (pos >= 0) {
            try {
                int a = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete?", "confirm", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (a == JOptionPane.YES_OPTION) {
                    int result = dao.StudentDAO.DeleteStudentTHAT(studentid);
                    if (result != 0) {
                        JOptionPane.showMessageDialog(null, "Deleted successfully");
                        loadStudents111();
                        loadStudents222();
                        jTextFieldSTUDENTID.setEnabled(false);
                        jTextFieldSTUDENTID.setText("");
                        jTextFieldSTUDENTNAME.setEnabled(false);
                        jTextFieldSTUDENTNAME.setText("");
                        jTextFieldPHONE.setEnabled(false);
                        jTextFieldPHONE.setText("");
                        jTextFieldEMAIL.setEnabled(false);
                        jTextFieldEMAIL.setText("");
                        jTextAreaADDRESS.setEnabled(false);
                        jTextAreaADDRESS.setText("");
                        jTextFieldDAYOFBIRTH.setEnabled(false);
                        jTextFieldDAYOFBIRTH.setText("");
                        jComboBoxMAJORID.setEnabled(false);
                        jButtonDELETE1.setEnabled(false);
                        jButtonPreDelete.setEnabled(false);
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Delete faileds");

            }
        } else {
            JOptionPane.showMessageDialog(null, "Select to delete");

        }
    }//GEN-LAST:event_jButtonDELETE1ActionPerformed

    private void jButtonPreDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPreDeleteActionPerformed
        int pos = jTable1.getSelectedRow();
        String studentid = jTextFieldSTUDENTID.getText();
        String majorCode=listst.get(pos).getMajorCode();
        if (pos >= 0) {
            try {
                int a = JOptionPane.showConfirmDialog(this, "Are you sure you want to Pre_DELETE?", "confirm", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (a == JOptionPane.YES_OPTION) {
                    int result = dao.StudentDAO.Pre_DeleteStudent(studentid,majorCode);
                    if (result != 0) {
                        JOptionPane.showMessageDialog(null, "Pre_DELETE successfully");
                        loadStudents111();
                        loadStudents222();
//                        resetjtextfile();
                        jTextFieldSTUDENTID.setEnabled(false);
                        jTextFieldSTUDENTID.setText("");
                        jTextFieldSTUDENTNAME.setEnabled(false);
                        jTextFieldSTUDENTNAME.setText("");
                        jTextFieldPHONE.setEnabled(false);
                        jTextFieldPHONE.setText("");
                        jTextFieldEMAIL.setEnabled(false);
                        jTextFieldEMAIL.setText("");
                        jTextAreaADDRESS.setEnabled(false);
                        jTextAreaADDRESS.setText("");
                        jTextFieldDAYOFBIRTH.setEnabled(false);
                        jTextFieldDAYOFBIRTH.setText("");
                        jComboBoxMAJORID.setEnabled(false);
                        jButtonDELETE1.setEnabled(false);
                        jButtonPreDelete.setEnabled(false);

                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Pre_DELETE faileds");

            }
        } else {
            JOptionPane.showMessageDialog(null, "Select to Pre_DELETE");

        }

    }//GEN-LAST:event_jButtonPreDeleteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        loadStudents111();
        loadStudents222();
        jTextFieldSTUDENTID.setEditable(true);
        jTextFieldSTUDENTID.setEnabled(true);
        jTextFieldSTUDENTNAME.setEnabled(false);
        jTextFieldPHONE.setEnabled(false);
        jTextFieldEMAIL.setEnabled(false);
        jTextFieldDAYOFBIRTH.setEnabled(false);
        jComboBoxMAJORID.setEnabled(false);
        jTextAreaADDRESS.setEnabled(false);
        jButtonDELETE1.setEnabled(false);
        jButtonPreDelete.setEnabled(false);
        if (checkStudentID2() == true) {
            String Code = jTextFieldSTUDENTID.getText().trim().toUpperCase();
            int x = findStudent(Code);
            if (x >= 0) {
                ArrayList<StudentDTO> listfound = new ArrayList<>();
                StudentDTO student = new StudentDTO(Code, listst.get(x).getFullName(), listst.get(x).getPhone(), listst.get(x).getEmail(), listst.get(x).getAddress(), listst.get(x).getDayOfBirth(), listst.get(x).getMajorCode(), listst.get(x).getStatus());
                listfound.add(student);
                loadFindMajor(listfound);
                jTable1.setRowSelectionInterval(0, 0);
                JOptionPane.showMessageDialog(this, "Found a Student!");
                jTextFieldSTUDENTID.setEditable(true);
            } else {
                JOptionPane.showMessageDialog(this, "Sorry...Not Found");
                jTextFieldSTUDENTID.grabFocus();
                jTextFieldSTUDENTID.selectAll();
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonGetALLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGetALLActionPerformed
        loadmajor111();
        loadStudents111();
        loadStudents222();
        jTextFieldSTUDENTID.setEnabled(false);
        jTextFieldSTUDENTID.setText("");
        jTextFieldSTUDENTNAME.setEnabled(false);
        jTextFieldSTUDENTNAME.setText("");
        jTextFieldPHONE.setEnabled(false);
        jTextFieldPHONE.setText("");
        jTextFieldEMAIL.setEnabled(false);
        jTextFieldEMAIL.setText("");
        jTextAreaADDRESS.setEnabled(false);
        jTextAreaADDRESS.setText("");
        jTextFieldDAYOFBIRTH.setEnabled(false);
        jTextFieldDAYOFBIRTH.setText("");
        jComboBoxMAJORID.setEnabled(false);
        jButtonDELETE1.setEnabled(false);
        jButtonPreDelete.setEnabled(false);
    }//GEN-LAST:event_jButtonGetALLActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pre_DeleteStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pre_DeleteStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pre_DeleteStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pre_DeleteStudent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pre_DeleteStudent().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonDELETE1;
    private javax.swing.JButton jButtonGetALL;
    private javax.swing.JButton jButtonPreDelete;
    private javax.swing.JComboBox<String> jComboBoxMAJORID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelAddress;
    private javax.swing.JLabel jLabelDAYOFBIRTH;
    private javax.swing.JLabel jLabelEMAIL;
    private javax.swing.JLabel jLabelMAJORCODE;
    private javax.swing.JLabel jLabelSTATUS;
    private javax.swing.JLabel jLabelSTUDENTID;
    private javax.swing.JLabel jLabelSTUDENTPHONE;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextAreaADDRESS;
    private javax.swing.JTextField jTextFieldDAYOFBIRTH;
    private javax.swing.JTextField jTextFieldEMAIL;
    private javax.swing.JTextField jTextFieldPHONE;
    private javax.swing.JTextField jTextFieldSTATUS;
    private javax.swing.JTextField jTextFieldSTUDENTID;
    private javax.swing.JTextField jTextFieldSTUDENTNAME;
    private javax.swing.JLabel jcheckStudentID;
    // End of variables declaration//GEN-END:variables
public String getNameMajor(String code) {
        for (MajorDTO x : listma) {
            if (code.equals(x.getMajorCode().trim())) {
                return x.getMajorName();
            }

        }
        return null;
    }

    private void resetJtext() {
        jTextFieldSTUDENTID.setEnabled(false);
        jTextFieldSTUDENTNAME.setEnabled(true);
        jTextFieldSTUDENTNAME.setEditable(false);

        jTextFieldPHONE.setEnabled(true);
        jTextFieldPHONE.setEditable(false);

        jTextFieldEMAIL.setEnabled(true);
        jTextFieldEMAIL.setEditable(false);
        jTextAreaADDRESS.setEnabled(true);
        jTextAreaADDRESS.setEditable(false);
        jTextFieldDAYOFBIRTH.setEnabled(true);
        jTextFieldDAYOFBIRTH.setEditable(false);
        jComboBoxMAJORID.setEnabled(true);
        // jComboBoxMajorCode.setEditable(false);
        jButtonDELETE1.setEnabled(true);
        jButtonPreDelete.setEnabled(true);

    }

    void loadmajor111() {
        try {
            listma = dao.majorDAO.getAllMajor();
            DefaultComboBoxModel cb = new DefaultComboBoxModel();
            for (MajorDTO dto : listma) {
                cb.addElement(dto.getMajorCode() + '-' + dto.getMajorName());
            }
            jComboBoxMAJORID.setModel(cb);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void resetjtextfile() {
        jTextFieldSTUDENTID.setEnabled(false);
        jTextFieldSTUDENTID.setText("");
        jTextFieldSTUDENTNAME.setEnabled(false);
        jTextFieldSTUDENTNAME.setText("");
        jTextFieldPHONE.setEnabled(false);
        jTextFieldPHONE.setText("");
        jTextFieldEMAIL.setEnabled(false);
        jTextFieldEMAIL.setText("");
        jTextAreaADDRESS.setEnabled(false);
        jTextAreaADDRESS.setText("");
        jTextFieldDAYOFBIRTH.setEnabled(false);
        jTextFieldDAYOFBIRTH.setText("");
        jComboBoxMAJORID.setEnabled(false);
        jTextFieldSTATUS.setEnabled(false);
        jTextFieldSTATUS.setEditable(false);
        jTextFieldSTATUS.setText("");
//        jComboBoxMajorCode.setSelectedIndex(-1);
        jButtonDELETE1.setEnabled(false);
        jButtonPreDelete.setEnabled(false);
    }

    private boolean checkStudentID2() {
        String studentID = jTextFieldSTUDENTID.getText().toUpperCase().trim();
        if (studentID.equals("")) {
            jcheckStudentID.setText("Please input StudentID");
            jcheckStudentID.setForeground(Color.red);
            jTextFieldSTUDENTID.grabFocus();
            jTextFieldSTUDENTID.selectAll();
        } else {
            if (studentID.length() < 8 || studentID.length() > 8) {
                jcheckStudentID.setText("Length is 8 character start 2 character in majorCode");

                jcheckStudentID.setForeground(Color.red);
                jTextFieldSTUDENTID.grabFocus();
                jTextFieldSTUDENTID.selectAll();

            } else {
                jcheckStudentID.setText("");
                jcheckStudentID.setForeground(Color.WHITE);
                return true;
            }

        }
        return false;
    }

    int findStudent(String id) {
        int count = 0;
        for (StudentDTO x : listst) {
            if (id.equals(x.getStudentID())) {
                return count;
            }
            count = count + 1;
        }
        return -1;

    }

    private void loadFindMajor(ArrayList<StudentDTO> listfound) {
        try {
            Vector header = new Vector();
            header.add("StudentID");
            header.add("StudentName");
            header.add("Phone");
            header.add("Email");
            header.add("MajorCode");
            Vector data = new Vector();
            for (StudentDTO student : listfound) {
                Vector row = new Vector();
                row.add(student.getStudentID());
                row.add(student.getFullName());
                row.add(student.getPhone());
                row.add(student.getEmail());
                String nameMajor = getNameMajor(student.getMajorCode());
                row.add(student.getMajorCode() + '-' + nameMajor);
                data.add(row);
            }
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setDataVector(data, header);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
